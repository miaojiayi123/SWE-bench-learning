# SWE-agent对可配置软件系统的处理

## 可配置软件系统 Configurable Software System
**系统核心逻辑与实现细节分离： 运行时通过外部的配置来改变软件架构的功能、界面**
**维护着一个通用代码库，通过不同的配置来满足各种需求**

### 技术特点

#### 1.Separation
将用户界面和配置逻辑分离： **固定核心算法，可以配置输入、输出参数**

#### 2.Modularity
多个模块组成软件系统，模块特定分工

#### 3.Extensibility
插件、api添加功能

#### 4.Priority
系统默认配置-用户配置文件-命令行参数

### 技术实现

#### 1.配置文件 json，yaml，xml文件

#### 2.GUI（图形化界面），CLI（命令行）

#### 3.Dependency Injection（like Spring里的用法）

## 以Linux为例理解可配置软件系统

### 1.内核可配置
编辑 .config 文件来配置内核选项，禁用、启用特定功能来配置满足需求的内核

### 2.modularity
modprobe加载模块，动态加载

### 3.用户控制
命令行bash和图形界面（操作系统可视化界面、选项）

## 基于SWE-agent对处理可配置软件系统的可行性分析

### 1.支持自动化的内核配置
agent可以分析、理解配置选项，并根据prompt来优化内核配置

### 2.模块化设计
生成模块化代码，设计接口，并管理模块加载逻辑

### 3.GUI支持
ACI帮助LM理解可配置软件系统更改后的状态、管理历史记录，加强用户交互



# 加速SWE-agent对可配置软件系统大代码量情景下的缺陷定位、修复效率

# 提高处理不同文件、函数间的缺陷传播关系的能力，提高缺陷定位和修复准确性

# 不依赖于用户的结果反馈，根据测试结果定位和修复的完全自动化流程

# SWE-agent对可配置软件系统的应用







